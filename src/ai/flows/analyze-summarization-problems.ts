
'use server';
/**
 * @fileOverview A Genkit flow that analyzes generated summaries to categorize
 * underlying user intents or themes.
 *
 * - analyzeSummarizationProblems - A function that takes generated summaries and context,
 *   then returns categorized user intents with counts and examples.
 * - AnalyzeSummarizationProblemsInput - The input type.
 * - AnalyzeSummarizationProblemsOutput - The output type.
 * - UserIntentCategory - Represents a categorized user intent.
 */

import {ai} from '@/ai/genkit';
import { z } from 'genkit';

// Input Schema
const GeneratedSummaryDetailSchema = z.object({
  inputData: z.record(z.string(), z.any()).describe("The product parameters input for the row that produced this summary."),
  generatedSummary: z.string().describe("The actual summary text generated by the LLM, reflecting a user interaction."),
});

const AnalyzeSummarizationProblemsInputSchema = z.object({
  generatedSummaryDetails: z.array(GeneratedSummaryDetailSchema).describe("An array of objects, each detailing a specific input and its generated summary."),
  targetSummarizationDefinitionName: z.string().optional().describe("The name of the summarization definition that was used to generate these summaries (for context, if available)."),
  targetSummarizationDefinitionText: z.string().optional().describe("The full definition text of the target summarization task (for context, if available)."),
  productSchemaDescription: z.string().optional().describe("A textual description of the schema for product parameters (e.g., field names, types, descriptions) that were available as inputs to the original product prompt, which generated the summary."),
  productContext: z.string().optional().describe("A brief description of the AI product or its primary goal, e.g., 'Customer service chatbot for e-commerce site', 'Tool to summarize meeting transcripts'. This helps interpret user intents from summaries."),
});
export type AnalyzeSummarizationProblemsInput = z.infer<typeof AnalyzeSummarizationProblemsInputSchema>;

// Output Schema
const UserIntentCategorySchema = z.object({
  categoryName: z.string().describe("A concise, descriptive name for the identified user intent category (e.g., 'Order Tracking Inquiry', 'Refund Request', 'Feature Usage Question')."),
  description: z.string().describe("A brief explanation of what this user intent category entails, based on the summaries."),
  count: z.number().int().describe("The number of provided summary details that fall into this user intent category. This should be a positive integer."),
  exampleSummaryIllustratingIntent: z.object({
      inputData: z.string().describe("The product parameters input for the row, formatted as a JSON string."),
      generatedSummary: z.string().describe("The generated summary that illustrates this user intent."),
    }).optional().describe("One example GeneratedSummaryDetail from the input that clearly illustrates this user intent category. Include this if possible. Its 'inputData' field MUST be a JSON string representation of the original input data object.")
});
export type UserIntentCategory = z.infer<typeof UserIntentCategorySchema>;

const AnalyzeSummarizationProblemsOutputSchema = z.object({
  userIntentCategories: z.array(UserIntentCategorySchema).describe("An array of identified user intent categories, each with a name, description, count of occurrences, and an optional example summary."),
  overallSummaryOfUserIntents: z.string().optional().describe("A brief overall summary of the key user intents identified from the summaries, if applicable.")
});
export type AnalyzeSummarizationProblemsOutput = z.infer<typeof AnalyzeSummarizationProblemsOutputSchema>;


export async function analyzeSummarizationProblems(
  input: AnalyzeSummarizationProblemsInput
): Promise<AnalyzeSummarizationProblemsOutput> {
  return internalAnalyzeSummarizationProblemsFlow(input);
}

const handlebarsPrompt = `
You are an expert AI Product Analyst specializing in uncovering user intents from summaries of user interactions.
Your task is to analyze a set of AI-generated summaries. These summaries reflect original user interactions with an AI product.
Your goal is to identify common user intents, themes, or goals expressed through these interactions, as captured by the summaries. This analysis will help understand *why* users are interacting with the product.

Context about the AI Product (if provided):
{{#if productContext}}
- Product Context/Goal: {{{productContext}}}
{{else}}
- (No specific product context provided, infer from summaries and input data schema)
{{/if}}

{{#if productSchemaDescription}}
- Product Input Parameters Schema (inputs to the original product that led to these summaries):
{{{productSchemaDescription}}}
{{/if}}

{{#if targetSummarizationDefinitionName}}
- Original Summarization Task Name (that generated these summaries): "{{targetSummarizationDefinitionName}}"
{{/if}}
{{#if targetSummarizationDefinitionText}}
- Original Summarization Task Definition:
  \`\`\`
  {{{targetSummarizationDefinitionText}}}
  \`\`\`
{{/if}}

Generated Summary Details (reflecting user interactions):
{{#each generatedSummaryDetails}}
Summary Example:
  - Input Data Provided to Product: {{{json inputData}}}
  - Generated Summary of Interaction: "{{generatedSummary}}"
---
{{/each}}

Instructions:
1.  Carefully review all the provided generated summaries and any context about the product or original summarization task.
2.  For each summary, try to understand what the *original user* was trying to achieve or communicate.
3.  Identify common themes, patterns, or underlying goals. These are your "user intent categories."
    Examples of user intent categories could be:
    - "User is seeking information about their order status."
    - "User is requesting assistance with a technical problem."
    - "User is expressing dissatisfaction with a service/product."
    - "User is trying to make a purchase or new booking."
    - "User is providing feedback."
4.  Group the summaries into these distinct user intent categories. A single summary should ideally belong to one primary category.
5.  For each category, provide:
    - 'categoryName': A concise name for the user intent category.
    - 'description': A brief explanation of this intent category.
    - 'count': The number of summary instances that reflect this intent. This should be a positive integer.
    - 'exampleSummaryIllustratingIntent': (Optional, but highly recommended) Select one GeneratedSummaryDetail from the input that clearly illustrates this user intent. If you include an example, its 'inputData' field MUST be a JSON string.

Your entire response must be ONLY a JSON object matching the output schema, with no other surrounding text or explanations.
The output schema expects a 'userIntentCategories' array and an optional 'overallSummaryOfUserIntents'.
Ensure the 'count' for each category accurately reflects how many of the provided summary examples fit that category.
`;

const analysisPrompt = ai.definePrompt({
  name: 'analyzeUserIntentsFromSummariesPrompt', // Renamed prompt for clarity
  input: {schema: AnalyzeSummarizationProblemsInputSchema},
  output: {schema: AnalyzeSummarizationProblemsOutputSchema},
  prompt: handlebarsPrompt,
  config: {
    temperature: 0.6, // Slightly higher temp for more nuanced intent interpretation
  },
});

const internalAnalyzeSummarizationProblemsFlow = ai.defineFlow(
  {
    name: 'internalAnalyzeUserIntentsFromSummariesFlow', // Renamed flow for clarity
    inputSchema: AnalyzeSummarizationProblemsInputSchema,
    outputSchema: AnalyzeSummarizationProblemsOutputSchema,
  },
  async (input) => {
    if (!input.generatedSummaryDetails || input.generatedSummaryDetails.length === 0) {
        return { userIntentCategories: [], overallSummaryOfUserIntents: "No summaries provided to analyze user intents." };
    }

    const { output, usage } = await analysisPrompt(input);

    if (!output) {
      throw new Error('The LLM did not return a parsable output for user intent analysis from summaries.');
    }
    // console.log('internalAnalyzeSummarizationProblemsFlow LLM usage:', usage);
    // console.log('internalAnalyzeSummarizationProblemsFlow LLM output:', JSON.stringify(output, null, 2));
    return output!;
  }
);

